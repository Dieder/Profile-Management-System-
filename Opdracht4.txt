Nu gaan we ocelot toevoegen om te kijken of we de twee api's kunnen rerouten.
De ocelot configuratie gebruikt servicehost en portnr. Dit portnummer wijzigt iedere keer als je met docker opstart. 


------------------------------------------------------
Docker configuratie
----------------------------------------------
1 Poort fixed maken
In het bestand lauchsettingsjson kan je
Een fixed port vastleggen voor profile service api. Dit bestand vindt je in de map 'properties'. Leg ssl port 5001 vast voor de profile service api!
En leg de docker ssl port 5000 vast voor de gateway
Zet de build van de projecten op Docker
In de properties van de solution zet multiple startup projects aan en selecteer 'start' voor api en gateway project.
Zet in beide projecten de launch browser in de project eigenschappen van debug naar: {Scheme}://{ServiceHost}:{ServicePort}/swagger

Installeer package ocelot en MMLib.SwaggerForOcelot in de profile service gateway!

Voeg ocelot toe aan services (add) en configure (use) in startup.cs!
---------------------------------------------
Ocelot configuratie
--------------------------------
Voeg de ocelot.json file config toe!

Voeg het laden van deze
.ConfigureAppConfiguration((hostingContext, config) =>
            {
                // Informs the app to use the ocelot.json file
                config.AddJsonFile("ocelot.json", optional:false, reloadOnChange: true);
            })


Voeg het ocelot bestand toe als content met copy if newer
Voeg Add in configure services en Use ocelot toe in configure van startup.cs
Als je nu de gateway api in docker start zie je op de swagger pagina twee extra api's die daar niet horen.
Die gaan we eerst weg filteren.

Maak een map swagger in Profile.Service.GateWay project en kopieer filteredapiexplorer.cs daarin
Voeg in startup.cs aan swaggergen het volgende toe.
 c.DocumentFilter<HideOcelotControllersFilter>();

